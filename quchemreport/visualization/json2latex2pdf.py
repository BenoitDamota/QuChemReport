#!/usr/bin/python
#-*- coding: utf-8 -*-

import sys
import os
import json

import numpy as np

from pylatex import Document, PageStyle, Head, Foot, MiniPage, Section, Subsection, Subsubsection, Command, \
    StandAloneGraphic, MultiColumn, Tabu, LongTabu, LargeText, Tabular, MediumText,  \
    LineBreak, NewPage, Tabularx, TextColor, simple_page_number, Table
from pylatex.utils import italic,bold, NoEscape
from pylatex.package import Package

from cclib.parser.utils import PeriodicTable

from PIL import Image

# constants
CstBohr2Ang = 0.52917721092
CstHartree2eV = 27.21138505

def add_row_filter(tab, l, expr='N/A'):
    if ( ((l[1].__class__ != tuple) and (l[1] != expr)) or # case 1
         ((l[1].__class__ == tuple) and np.all([elt != expr for elt in l[1]])) ) : # case 2
        ## case 1 : value is not a tuple AND is not expr (eg. N/A)
        ## case 2 : value is a tuple AND ALL values are different from expr (eg. N/A)
        tab.add_row(l)


def figure_two_col(doc, expr, allfileslist, tailleMO="8cm", caption="Molecular oribitals", pos="hb"):
    img = np.sort([i for i in allfileslist if i.find(expr) > 0])
    doc.append(NoEscape(r'\begin{figure}[%s]' % pos))
    doc.append(NoEscape(r'\centering'))
    img_ = "{"+img[0][:-4]+"}.png"
    doc.append(NoEscape(r'\includegraphics[width='+tailleMO+']{'+img_+'}'))
    doc.append(NoEscape(r'~~~'))
    img_ = "{"+img[1][:-4]+"}.png"
    doc.append(NoEscape(r'\includegraphics[width='+tailleMO+']{'+img_+'}'))
    doc.append(NoEscape(r'\caption*{' + caption + '}'))
    doc.append(NoEscape(r'\end{figure}'))

# optimal for 4 MO, 2 views : ("8cm", "width") or ("5.7cm","height")
#### TODO : tests
def _figure_MO_autoratio(sample_img, max_width=8.0, max_height=5.7):
    im = Image.open(sample_img)
    bbox = im.getbbox()
    width = float(bbox[2] - bbox[0])
    height = float(bbox[3] - bbox[1])
    if (width / height) > (max_width / max_height) :
        return ("%.1fcm" % max_width, "width")
    else:
        return ("%.1fcm" % max_height, "height")

def figure_MO_table(doc, expr_list, allfileslist, tailleMO="8cm", tailleMode="width",
                    caption="Molecular oribitals", pos="p", autosize=True):
    if autosize:
        tailleMO, tailleMode = _figure_MO_autoratio(allfileslist[0])
    doc.append(NoEscape(r'\begin{figure}[%s]' % pos))
    doc.append(NoEscape(r'\begin{minipage}[c][\textheight]{\textwidth}'))
    doc.append(NoEscape(r'\centering'))
    doc.append(NoEscape(r'\begin{tabular}{cc}'))
    for expr in expr_list:
        img = np.sort([i for i in allfileslist if i.find(expr) > 0])
        img_ = "{"+img[0][:-4]+"}.png"
        doc.append(NoEscape(r'\includegraphics['+tailleMode+'='+tailleMO+']{'+img_+'} & '))
        img_ = "{"+img[1][:-4]+"}.png"
        doc.append(NoEscape(r'\includegraphics['+tailleMode+'='+tailleMO+']{'+img_+'} \\\\ '))
    doc.append(NoEscape(r'\end{tabular}'))
    doc.append(NoEscape(r'\caption*{' + caption + '}'))
    doc.append(NoEscape(r'\end{minipage}'))
    doc.append(NoEscape(r'\end{figure}'))


def json2latex2pdf(json,mode="clean"):
    
    # on construit le nom du rapport
    #rapFile = "_TEX_report"
    name = json["comp_details"]["general"]["job_type"][0]
    rapFile = (name + "_report")
    
    
    #####################################################################
    #                                                                   #
    ## production du rapport en .tex                                 #
    #                                                                   #
    #####################################################################
    
    ### create document and import needed packages
    
    doc = (Document("article"))
    
    # packages
    doc.packages.append(Package('datetime'))
    doc.packages.append(NoEscape(r'\usepackage[margin=2cm]{geometry}'))
    doc.packages.append(NoEscape(r'\usepackage{extramarks}'))
    doc.packages.append(NoEscape(r'\usepackage{fancyhdr}'))
    doc.packages.append(NoEscape(r'\usepackage{svg}'))
    doc.packages.append(NoEscape(r'\usepackage[utf8]{inputenc}'))
    doc.packages.append(NoEscape(r'\usepackage{titlesec}'))
    #
    doc.packages.append(NoEscape(r'\pagestyle{fancy}'))
    doc.packages.append(NoEscape(r'\fancyhf{}'))
    # define header / footer texts
    doc.packages.append(NoEscape(r'\lhead{MOLECULAR CALCULATION REPORT}'))
    doc.packages.append(NoEscape(r'\rhead{Generated by QuChemReport}'))
    doc.packages.append(NoEscape(r'\lfoot{\today ~  \currenttime}'))
    doc.packages.append(NoEscape(r'\rfoot{Page \thepage}'))
    doc.packages.append(NoEscape(r'\cfoot{}'))
    # redefine rules for header / footer
    doc.packages.append(NoEscape(r'\renewcommand\headrulewidth{0.4pt}'))
    doc.packages.append(NoEscape(r'\renewcommand\footrulewidth{0.4pt}'))
    # redefine section
    doc.packages.append(NoEscape(r'\definecolor{ufrblue}{RGB}{0,161,140}'))
    doc.packages.append(NoEscape(r'\definecolor{bordeau}{RGB}{125,31,31}'))
    doc.packages.append(NoEscape(r'\titleformat{name=\section}[block]{\sc\large}{}{0pt}{\colorsection}'))
    doc.packages.append(NoEscape(r'\titlespacing*{\section}{0pt}{\baselineskip}{5pt}'))
    doc.packages.append(NoEscape(r'\titlespacing{\subsection}{4pt}{\baselineskip}{5pt}'))
    doc.packages.append(NoEscape(r'\newcommand{\colorsection}[1]{'+
                                 r'\colorbox{ufrblue}{\parbox{\dimexpr\textwidth-2\fboxsep}{\textcolor{white}{'+
                                 r'\textbf{{\thesection.\ #1}}}}}}'))
    
    
    ### section 1 : authorship TODO with the DB ! 
    #########################################
#    with doc.create(Section('AUTHORSHIP')):
#        with doc.create(LongTabu("X[1,l] X[2,l]")) as tab:
#            tab.add_row(['Original file', json["authorship"]["log_file"]])
#            tab.add_row(['Primary author',  json["authorship"]["primary_author"]])
#            add_row_filter(tab, ['ORCID',  json["authorship"]["primary_author_orcid"]])
#            add_row_filter(tab, ['Affiliation',  json["authorship"]["primary_author_affiliation"]])
#            add_row_filter(tab, ['Publication DOI',  json["authorship"]["publication_DOI"]])
    
    ### section 2 : molecule
    
    with doc.create(Section('MOLECULE')) :
        taillePng = "6cm"
        nomPng = "img-TOPOLOGY.png"
        if (not os.path.isfile("img-TOPOLOGY.png")) :
            print("No PNG named "+nomPng+" found. STOP.\n")
            sys.exit()
    
        # figure with Chemical structure diagram
        doc.append(NoEscape(r'\begin{figure}[h]'))
        doc.append(NoEscape(r'\begin{center}'))
        doc.append(NoEscape(r'\includegraphics[width='+taillePng+']{'+nomPng+'}'))
        doc.append(NoEscape(r'\end{center}'))
        doc.append(NoEscape(r'\vspace{-5mm}'))
        doc.append(NoEscape(r'\caption*{Chemical structure diagram with atomic numbering.}'))
        doc.append(NoEscape(r'\end{figure}'))
    
    
        with doc.create(LongTabu("X[1,l] X[2,l]")) as mol_table:
            inchi = (json["molecule"]["inchi"])[0].rstrip().split("=")[-1]
            mol_table.add_row(['InChI'  , inchi])
            mol_table.add_row(['SMILES' , json["molecule"]["smi"] ])
            mol_table.add_row(['Monoisotopic mass', "%.5f Da" % json["molecule"]["monoisotopic_mass"]])
            mol_table.add_row(['Formula', json["molecule"]["formula"] ])
            mol_table.add_row(['Charge', json["molecule"]["charge"] ])
            mol_table.add_row(['Spin multiplicity', json["molecule"]["multiplicity"] ])
    
    
    ### section 2 : computational details
    #########################################
    software = json["comp_details"]["general"]["package"]
    with doc.create(Section('COMPUTATIONAL DETAILS')) :
        #with doc.create(Subsection('General parameters')) :
        with doc.create(LongTabu("X[1,l] X[1,l]")) as param_table :
            try : param_table.add_row(['Software'  , 
                                 json["comp_details"]["general"]["package"] + ' (' + 
                                 json["comp_details"]["general"]["package_version"] + ')'])
            except KeyError :
                pass
            param_table.add_row(['Computational method', 
                                 json["comp_details"]["general"]["last_theory"]])
            add_row_filter(param_table, ['Functional', 
                                         json["comp_details"]["general"]["functional"]]) 
            try : add_row_filter(param_table, ['Basis set name', 
                                         json["comp_details"]["general"]["basis_set_name"]])
            except KeyError :
                pass
            param_table.add_row(['Number of basis set functions', 
                                 json["comp_details"]["general"]["basis_set_size"]])
            param_table.add_row(['Closed shell calculation', 
                                 json["comp_details"]["general"]["is_closed_shell"]])
            add_row_filter(param_table, ['Integration grid', 
                                         json["comp_details"]["general"]["integration_grid"]])
            add_row_filter(param_table, ['Solvent', 
                                         json["comp_details"]["general"]["solvent"]])
#  TODO Test if solvent = gas in this case no Solvent reaction filed method
#          add_row_filter(param_table, ['Solvent reaction filed method',  
#                                         json["comp_details"]["general"]["solvent_reaction_field"]])
    
            scfTargets = json["comp_details"]["general"]["scf_targets"][-1]
            if software=="Gaussian" : # Gaussian or GAUSSIAN (upper/lower?
                param_table.add_row(["Requested SCF convergence on RMS density matrix", scfTargets[0]])
                param_table.add_row(["Requested SCF convergence on MAX density matrix",scfTargets[1] ])
                param_table.add_row(["Requested SCF convergence on energy", scfTargets[2]])
            if software=="GAMESS" :
                param_table.add_row(["Requested SCF convergence on density", scfTargets[0] ])
    
            #with doc.create(Subsection('Thermochemistry and normal modes calculation parameters')) :
            ## TODO tester si freq
            try:
                add_row_filter(param_table, ['Temperature', 
                                         "%.2f K" % json["comp_details"]["freq"]["temperature"]])
            except:
                pass
            T_len = False
            
            try : len(json["comp_details"]["freq"]["temperature"]) 
            except KeyError :
                json["comp_details"]["freq"]["temperature"] = []
            except TypeError :
                T_len = True
                if T_len is True :
                     try : add_row_filter(param_table, ['Anharmonic effects', 
                                             json["comp_details"]["freq"]["anharmonicity"]])
                
                     except KeyError :
                            pass
            if (json["comp_details"]["freq"]["temperature"]) != [] :
                try : add_row_filter(param_table, ['Anharmonic effects', 
                                             json["comp_details"]["freq"]["anharmonicity"]])
                
                except KeyError :
                    pass
          
            #with doc.create(Subsection('Excited states calculation parameters')) :
            try :  add_row_filter(param_table, ['Number of excited states'  , 
                                         json["comp_details"]["excited_states"]["nb_et_states"]])
            except KeyError :
                 pass
    
    ### section 3 : results
    #########################################
    with doc.create(Section('RESULTS')) :
        with doc.create(Subsection('Wavefunction')) :
    
            with doc.create(LongTabu("X[l] X[l]")) as wavef_table:
                wavef_table.add_row(['Total molecular energy', "%.5f Hartrees" %
                                     json["results"]["wavefunction"]["total_molecular_energy"] 
                                    ]) 
                homo_indexes = [i + 1 for i in json["results"]["wavefunction"]["homo_indexes"]]
                wavef_table.add_row(['HOMO number', ("%s" % homo_indexes)[1:-1] ]) # indice begins at 0, remove brackets
    
    
            MO_energies = json["results"]["wavefunction"]["MO_energies"][-1]
            homo_nb =  json["results"]["wavefunction"]["homo_indexes"][-1]
            doc.append(NoEscape(r'\begin{center}'))
            with doc.create(Table()) as motab:
                doc.append(NoEscape(r'\centering'))
                with doc.create(Tabular('p{1cm}ccccp{1cm}')) as mo_table:
                    row_cells = MultiColumn(6, align='c', data='Calculated energies for the frontier molecular orbitals (in eV)')
                    mo_table.add_row([row_cells])
                    mo_table.add_row(['','HOMO-1' , 'HOMO', 'LUMO', 'LUMO+1',''])
                    mo_table.add_hline()
                    mo_table.add_row(['',
                                      "%.2f" % MO_energies[homo_nb-1],
                                      "%.2f" % MO_energies[homo_nb],
                                      "%.2f" % MO_energies[homo_nb+1],
                                      "%.2f" % MO_energies[homo_nb+2],''])
            doc.append(NoEscape(r'\end{center}'))
    
            # figure with MO
            #### TODO : test autosize
            try:
                if len(json["results"]["excited_states"]['MO_png_list']) > 0:
                    figure_MO_table(doc, ["LU1", "LUMO", "HOMO", "HO1"], 
                                    json["results"]["excited_states"]['MO_png_list'],
                                    caption=("Representation of the frontier molecular orbitals with a cutoff "
                                             "value of 0.05. From up to bottom: LUMO+1, LUMO, HOMO, HOMO-1."))
            except:
                pass
    
            # figure skel for Atom numbering scheme
            try:
                figure_two_col(doc, "skel", json["results"]["geometry"]['skel_png_list'],
                               caption="Atom numbering scheme.", pos="h")
            except:
                pass
    
            # Mulliken partial charges table
            try : mulliken = json["results"]["wavefunction"]["Mulliken_partial_charges"]
            except KeyError :
                mulliken = []
            if len(mulliken) != 0 :
                mulliken = np.array(mulliken)
                mean_m = np.mean(mulliken)
                dev_m = np.std(mulliken)
                thres_max = mean_m + dev_m
                thres_min = mean_m - dev_m
                doc.append(NoEscape(r'\begin{center}'))
                ind = np.argsort(mulliken)
                with doc.create(Tabular('p{0.5cm}rrrp{0.5cm}')) as tableau :
                    row_cells = [MultiColumn(5, align='c', 
                                             data='Most intense Mulliken atomic charges')]
                    tableau.add_row(row_cells)
                    row_cells = [MultiColumn(5, align='c', 
                                             data='mean = %.3f e, std = %.3f' % (
                                                 mean_m, dev_m))]
                    tableau.add_row(row_cells)
                    tableau.add_row(["","Atom", "number","Mulliken charges",""])
                    tableau.add_hline()
    
                    for ielt in ind :
                        if (mulliken[ielt] > thres_max) or (mulliken[ielt] < thres_min) :
                            tableau.add_row(["", PeriodicTable().element[json['molecule']["atoms_Z"][ielt]],
                                             (1+ielt), "%.3f" % mulliken[ielt],""])
                    tableau.add_hline()
                doc.append(NoEscape(r'\end{center}'))
    
            # figure MEP
            try:
                if len(json["results"]["wavefunction"]['MEP_png_list']) > 0:
                    figure_two_col(doc, "MEP", json["results"]["wavefunction"]['MEP_png_list'],
                                   caption=("Representation of the molecular electrostatic potential "
                                            "at the distance of the van der Waals radii of the atoms. "
                                            "The red/blue regions depict the most negative (-0.1) / "
                                            "positive (+0.1) regions."), pos="h")
            except:
                pass
    
        with doc.create(Subsection('Geometry')) :
            ######## PB
            atomic = json["results"]["geometry"]["elements_3D_coords_converged"]
            oxtrf ,oytrf, oxtrd ,oytrd = ('N/A','N/A','N/A','N/A')
    
            ### TODO
            # if singlePoint==1 :
            #      doc.append('This calculation is a single point ')
            try : is_opt = json["results"]["geometry"]["OPT_DONE"] == True
            except KeyError :
                is_opt = []
            if is_opt:
                doc.append(NoEscape(r"This calculation is the result of a geometry optimization process."))            
            else: 
                doc.append(NoEscape(r"\textcolor{bordeau}{Warning : this calculation does not include a geometry "
                                    "optimization process. This geometry may not be a stationary "
                                    "point for those computational parameters. In this case, results must be "
                                    "used with caution.}"))
    
            if is_opt:
                ### TODO tests gaussian
                doc.append(NoEscape(r'\begin{center}'))
                geomTargets = json["comp_details"]["geometry"]["geometric_targets"]
                geomValues = json["results"]["geometry"]["geometric_values"][-1]
                with doc.create(Tabular('p{0cm}lrrp{0cm}')) as param_table : 
                    row_cells = [MultiColumn(5, align='c', data='Geometry optimization convergence criteria')]
                    param_table.add_row(row_cells)
                    param_table.add_row(["","","Value","Threshold",""])
                    param_table.add_hline()
                    if software=="Gaussian" :
                        param_table.add_row(["", "Maximum Force", "%.6f" % geomValues[0], "%.6f" % geomTargets[0], ""])
                        param_table.add_row(["", "RMS Force", "%.6f" % geomValues[1], "%.6f" % geomTargets[1], ""])
                        param_table.add_row(["", "Maximum Displacement", "%.6f" % geomValues[2], "%.6f" % geomTargets[2], ""])
                        param_table.add_row(["", "RMS Displacement", "%.6f" % geomValues[3], "%.6f" % geomTargets[3], ""])
                    if software=="GAMESS" :
                        # in Hartrees per Bohr
                        param_table.add_row(["", "Maximum Force", "%.5f" % geomValues[0], "%.5f" % geomTargets[0], ""])
                        param_table.add_row(["", "RMS Force", "%.5f" % geomValues[1], "%.5f" % geomTargets[1], ""])
                    param_table.add_hline()
                doc.append(NoEscape(r'\end{center}'))
    
            with doc.create(LongTabu("X[l] X[l]")) as geom_table:
                geom_table.add_row(['Nuclear repulsion energy', 
                                    "%.5f Hartrees" % json["results"]["geometry"]["nuclear_repulsion_energy_from_xyz"]])
    
            doc.append(NoEscape(r'\begin{center}'))
            with doc.create(Tabular('p{0.5cm}rrrrp{0.5cm}')) as tableau :
                row_cells = [MultiColumn(6, align='c', data='Cartesian atomic coordinates in Angstroms')]
                tableau.add_row(row_cells)
                tableau.add_row(["","Atom", 
                                 MultiColumn(1, align='c', data='X'),
                                 MultiColumn(1, align='c', data='Y'),
                                 MultiColumn(1, align='c', data='Z'),
                                 ""])
                tableau.add_hline()
                atoms = np.array(json["results"]["geometry"]["elements_3D_coords_converged"]).reshape((-1, 3))
                for i, a in enumerate(atoms):
                    tableau.add_row(["",PeriodicTable().element[json['molecule']["atoms_Z"][i]],
                                     "%.4f" % a[0], "%.4f" % a[1], "%.4f" % a[2],"" ])
                tableau.add_hline()
            doc.append(NoEscape(r'\end{center}'))
    
    
        ### Freq
        #### TODO : tests
        
        
        with doc.create(Subsection('Thermochemistry and normal modes')) :
            rtemper = json["comp_details"]["freq"]["temperature"]
            # ND-arrays
            try : vibrational_int = np.array(json["results"]["freq"]["vibrational_int"])
            except KeyError :
                vibrational_int = []
            try : vibrational_freq = np.array(json["results"]["freq"]["vibrational_freq"])
            except KeyError : vibrational_freq = []
            
            try : vibrational_sym = np.array(json["results"]["freq"]["vibrational_sym"])
            except KeyError :
                vibrational_sym = []
                
            # filtering & orderering
            if len(vibrational_int) == 0 :
                vibrational_int = []
            else :    
                vib_filter = vibrational_int > 50.
                vib_order = np.argsort(vibrational_freq[vib_filter])[::-1]
                vibrational_int = vibrational_int[vib_filter][vib_order]
                vibrational_freq = vibrational_freq[vib_filter][vib_order]
                vibrational_sym = vibrational_sym[vib_filter][vib_order]
    
            if (len(vibrational_int) != 0) and (rtemper != "N/A") :
                with doc.create(LongTabu("X[l] X[l]")) as thermo_table:
                    thermo_table.add_row(['Sum of electronic and zero-point energy in Hartrees', 
                                          json["results"]["freq"]["zero_point_energy"]])
                    thermo_table.add_row(["Sum of electronic and thermal at "
                                          "%f K energies in atomic units" % rtemper, 
                                          json["results"]["freq"]["electronic_thermal_energy"]])
                    thermo_table.add_row(["Entropy at %f K in atomic units" % rtemper, 
                                          json["results"]["freq"]["entropy"]])
                    thermo_table.add_row(["Enthalpy at %f K in atomic units" % rtemper,
                                          json["results"]["freq"]["enthalpy"]])
                    thermo_table.add_row(["Gibbs free energy at %f K in atomic units" % rtemper,
                                          json["results"]["freq"]["free_energy"]])
    
                doc.append("Table of the most intense molecular vibrations (> 20 km/mol) (%d)\n" % 
                           len(vibrational_int))
                with doc.create(Tabular('rrrc')) as tableau :
                    tableau.add_row(["", "Frequencies", "Intensity", "Symmetry"])
                    for i in range(len(vibrational_freq)) :
                        tableau.add_row(["",
                                         "%.4f" % vibrational_freq[i],
                                         "%.4f" % vibrational_int[i], 
                                         vibrational_sym[i]])
            else:
                doc.append(NoEscape(r"\textcolor{bordeau}{Warning : force constants and the "
                                    "resulting vibrational frequencies were not computed.}"))
    
        ### Excited states
        try : et_energies = json["results"]["excited_states"]["et_energies"]
        except KeyError :
            et_energies = []
        rnbExci = len(et_energies)
        if rnbExci != 0 and et_energies != 'N/A':
            with doc.create(Subsection('Excited states')) :
                doc.append(NoEscape(r'\begin{center}'))
                with doc.create(Tabular('p{0cm}rrrrrrp{0cm}')) as tableau :
                    row_cells = [MultiColumn(8, align='c', 
                                             data="Calculated mono-electronic excitations")]
                    tableau.add_row(row_cells)
                    tableau.add_row(["", "Number", "Energy", "Symmetry",
                                     "Oscillator strength", "Rotatory strength", "Transitions", ""])
                    tableau.add_hline()
                    for i in range(rnbExci) :
                        etr_i = (json["results"]["excited_states"]["et_rot"][i] 
                                 if json["results"]["excited_states"]["et_rot"] != 'N/A' 
                                 else 'N/A')
                        tableau.add_row(["", (1 + i),
                                         "%.2f" % et_energies[i], 
                                         json["results"]["excited_states"]["et_sym"][i],
                                         "%.6f" % json["results"]["excited_states"]["et_oscs"][i],
                                         etr_i,
                                         len(json["results"]["excited_states"]["et_transitions"][i]), ""])
                    tableau.add_hline()
                doc.append(NoEscape(r'\end{center}'))
    
    
    #####################################################################
    #                                                                   #
    ## 3. compilation LaTeX                                             #
    #                                                                   #
    #####################################################################
    
    # on compile
    # on previent si le fichier PDF est present ou pas
    # par defaut dans pylatex tout ce qui concerne latex est efface
    
    ### compile and output
    
    # doc.generate_pdf(rapFile, clean_tex=True) # comportement en routine, avec False en mode dev/debug
    # OK sans SVG doc.generate_pdf(rapFile, clean_tex=False)
    # pas de chance !! doc.generate_pdf(rapFile, clean_tex=False,compiler="pdflatex  --shell-escape")
    
    texFile = rapFile + ".tex"
    if (os.path.isfile(texFile)) :
        os.remove(texFile)
    
    pdfFile = rapFile + ".pdf"
    if (os.path.isfile(pdfFile)) :
        os.remove(pdfFile)
    
    doc.generate_tex(rapFile)
    cmd = "pdflatex  --shell-escape " + rapFile
    
    # si cleanMode = "--clean" on redirige vers /dev/null
    if mode=="clean" :
       cmd += " > /dev/null"
    
    # compilation LaTeX
    
    os.system(cmd)
    
    # un peu de nettoyage si cleanMode = "--clean"
    
    if mode=="clean" :
       if os.path.isfile(rapFile+'.aux') :
          os.remove(rapFile+'.aux')
       if os.path.isfile(rapFile+'.log') :
          os.remove(rapFile+'.log')
       if os.path.isfile(rapFile+'.tex') :
          os.remove(rapFile+'.tex')
    
    # message de fin
    
    if (os.path.isfile(pdfFile)) :
       print('Report file is ' + rapFile + ".pdf")
    else :
       print('Probably a LateX error.')
